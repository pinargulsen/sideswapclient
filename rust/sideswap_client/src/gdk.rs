/* automatically generated by rust-bindgen 0.59.1 */

pub type size_t = ::std::os::raw::c_ulong;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __uint64_t = ::std::os::raw::c_ulong;
#[doc = " A server session"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GA_session {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GA_json {
    _unused: [u8; 0],
}
#[doc = " An api method call that potentially requires two factor authentication to complete"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GA_auth_handler {
    _unused: [u8; 0],
}
#[doc = " A notification handler"]
pub type GA_notification_handler = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ::std::os::raw::c_void, details: *mut GA_json),
>;
extern "C" {
    #[doc = " Perform one-time initialization of the library. This call must be made once"]
    #[doc = " only before calling any other GDK functions, including any functions called"]
    #[doc = " from other threads."]
    #[doc = ""]
    #[doc = " :param config: The :ref:`init-config-arg`."]
    pub fn GA_init(config: *const GA_json) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get any error details associated with the last error on the current thread."]
    #[doc = ""]
    #[doc = " :param output: Destination for the output :ref:`error-details` JSON."]
    #[doc = "|     Returned GA_json should be freed using `GA_destroy_json`."]
    pub fn GA_get_thread_error_details(output: *mut *mut GA_json) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Create a new session."]
    #[doc = ""]
    #[doc = " :param session: Destination for the resulting session."]
    #[doc = "|     The returned session should be freed using `GA_destroy_session`."]
    #[doc = ""]
    #[doc = " Once created, the caller should set a handler for notifications using"]
    #[doc = " `GA_set_notification_handler`, before calling `GA_connect` to connect the"]
    #[doc = " session to the network for use."]
    pub fn GA_create_session(session: *mut *mut GA_session) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set a handler to be called when notifications arrive for a session."]
    #[doc = ""]
    #[doc = " :param session: The session to receive notifications for."]
    #[doc = " :param handler: The handler to receive notifications."]
    #[doc = " :param context: A context pointer to be passed to the handler."]
    #[doc = ""]
    #[doc = " This call must be initially made on a session before `GA_connect`."]
    #[doc = " :ref:`ntf-notifications` may arrive on different threads, so the caller"]
    #[doc = " must ensure that shared data is correctly locked within the handler."]
    #[doc = " The ``GA_json`` object passed to the caller must be destroyed by the"]
    #[doc = " caller using `GA_destroy_json`. Failing to do so will result in"]
    #[doc = " memory leaks."]
    #[doc = ""]
    #[doc = " Once a session has been connected, this call can be made only with null"]
    #[doc = " values for ``handler`` and ``context``. Once this returns, no further"]
    #[doc = " notifications will be delivered for the lifetime of the session."]
    #[doc = ""]
    #[doc = " The caller should not call session functions from within the callback"]
    #[doc = " handler as this may block the application."]
    pub fn GA_set_notification_handler(
        session: *mut GA_session,
        handler: GA_notification_handler,
        context: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Free a session allocated by `GA_create_session`."]
    #[doc = ""]
    #[doc = " :param session: The session to free."]
    #[doc = ""]
    #[doc = " If the session was connected using `GA_connect` then this call will"]
    #[doc = " disconnect it it before destroying it."]
    pub fn GA_destroy_session(session: *mut GA_session) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Connect the session to the specified network."]
    #[doc = ""]
    #[doc = " :param session: The session to connect."]
    #[doc = " :param net_params: The :ref:`net-params` of the network to connect to."]
    #[doc = ""]
    #[doc = " This call connects to the remote network services that the session"]
    #[doc = " requires, for example the Green servers or Electrum servers."]
    #[doc = " `GA_connect` must be called only once per session lifetime, after"]
    #[doc = " `GA_create_session` and before `GA_destroy_session` respectively."]
    #[doc = " Once connected, the underlying network connection of the"]
    #[doc = " session can be controlled using `GA_reconnect_hint`."]
    #[doc = ""]
    #[doc = " Once the session is connected, use `GA_register_user` to create a new"]
    #[doc = " wallet for the session, or `GA_login_user` to open an existing wallet."]
    pub fn GA_connect(
        session: *mut GA_session,
        net_params: *const GA_json,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Connect or disconnect a sessions underlying network connection."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param hint: the :ref:`reconnect` describing the desired reconnection behaviour."]
    pub fn GA_reconnect_hint(
        session: *mut GA_session,
        hint: *const GA_json,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the current proxy settings for the given session."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param output: Destination for the output :ref:`proxy-info`."]
    #[doc = "|     Returned GA_json should be freed using `GA_destroy_json`."]
    pub fn GA_get_proxy_settings(
        session: *mut GA_session,
        output: *mut *mut GA_json,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Compute a hashed wallet identifier from a BIP32 xpub or mnemonic."]
    #[doc = ""]
    #[doc = " The identifier returned is computed from the network combined with the"]
    #[doc = " master chain code and public key of the xpub/mnemonic. It can be used"]
    #[doc = " as a unique wallet identifier to mitigate privacy risks associated with"]
    #[doc = " storing the wallet's xpub."]
    #[doc = ""]
    #[doc = " :param net_params: The :ref:`net-params` of the network to compute an identifier for."]
    #[doc = " :param params: The :ref:`wallet-id-request` to compute an identifier for."]
    #[doc = " :param output: Destination for the output JSON."]
    #[doc = "|     Returned GA_json should be freed using `GA_destroy_json`."]
    pub fn GA_get_wallet_identifier(
        net_params: *const GA_json,
        params: *const GA_json,
        output: *mut *mut GA_json,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Make a request to an http server."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param params: the :ref:`http-params` of the server to connect to."]
    #[doc = " :param output: Destination for the output JSON."]
    #[doc = "|     Returned GA_json should be freed using `GA_destroy_json`."]
    pub fn GA_http_request(
        session: *mut GA_session,
        params: *const GA_json,
        output: *mut *mut GA_json,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Refresh the sessions internal cache of Liquid asset information."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param params: the :ref:`assets-params-data` of the server to connect to."]
    #[doc = " :param output: Destination for the assets JSON."]
    #[doc = "|     Returned GA_json should be freed using `GA_destroy_json`."]
    #[doc = ""]
    #[doc = " Each release of GDK comes with a list of the latest registered Liquid"]
    #[doc = " assets built-in. This call is used to return this data and/or to update"]
    #[doc = " it to include any new assets that have been registered since installation"]
    #[doc = " or the last update."]
    pub fn GA_refresh_assets(
        session: *mut GA_session,
        params: *const GA_json,
        output: *mut *mut GA_json,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Validate asset domain name."]
    #[doc = " (This is a interface stub)"]
    #[doc = ""]
    pub fn GA_validate_asset_domain_name(
        session: *mut GA_session,
        params: *const GA_json,
        output: *mut *mut GA_json,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Create a new user wallet."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param hw_device: :ref:`hw-device` or empty JSON for software wallet registration."]
    #[doc = " :param mnemonic: The user's mnemonic passphrase for software wallet registration."]
    #[doc = " :param call: Destination for the resulting GA_auth_handler to perform the registration."]
    #[doc = "|     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`."]
    pub fn GA_register_user(
        session: *mut GA_session,
        hw_device: *const GA_json,
        mnemonic: *const ::std::os::raw::c_char,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Authenticate to a user's wallet."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param hw_device: :ref:`hw-device` or empty JSON for software wallet login."]
    #[doc = " :param details: The :ref:`login-credentials` for authenticating the user."]
    #[doc = " :param call: Destination for the resulting GA_auth_handler to perform the login."]
    #[doc = "|     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`."]
    #[doc = ""]
    #[doc = " If a sessions underlying network connection has disconnected and"]
    #[doc = " reconnected, the user will need to login again using this function. In"]
    #[doc = " this case, the caller can pass empty JSON for both ``hw_device`` and"]
    #[doc = " ``details`` to login using the previously passed credentials and device."]
    pub fn GA_login_user(
        session: *mut GA_session,
        hw_device: *const GA_json,
        details: *const GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set a watch-only login for a logged-in user wallet."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param username: The username."]
    #[doc = " :param password: The password."]
    pub fn GA_set_watch_only(
        session: *mut GA_session,
        username: *const ::std::os::raw::c_char,
        password: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the current watch-only login for a logged-in user wallet, if any."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param username: Destination for the watch-only username. Empty string if not set."]
    #[doc = "|     Returned string should be freed using `GA_destroy_string`."]
    pub fn GA_get_watch_only_username(
        session: *mut GA_session,
        username: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Remove and delete the server history of a wallet."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param call: Destination for the resulting GA_auth_handler to perform the removal."]
    #[doc = "|     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`."]
    #[doc = ""]
    #[doc = " For multisig Green sessions, removing a wallet removes all history and"]
    #[doc = " data associated with the wallet on the server. This operation cannot be"]
    #[doc = " undone, and re-registering the wallet will not bring back the wallet's"]
    #[doc = " history. For this reason, only empty wallets can be deleted."]
    #[doc = ""]
    #[doc = " For singlesig sessions, removing a wallet removes the locally persisted cache."]
    #[doc = " The actual removal will happen after `GA_destroy_session` is called."]
    pub fn GA_remove_account(
        session: *mut GA_session,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Create a subaccount."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param details: The subaccount ``\"name\"`` (which must not be already used in"]
    #[doc = "|     the wallet) and ``\"type\"`` (either ``\"2of2\"``, ``\"2of2_no_recovery\"`` or ``\"2of3\"``) must be"]
    #[doc = "|     populated. Type ``\"2of2_no_recovery\"`` is available only for Liquid networks and"]
    #[doc = "|     always requires both keys for spending. For type ``\"2of3\"`` the caller may provide"]
    #[doc = "|     either ``\"recovery_mnemonic\"`` or ``\"recovery_xpub\"`` if they do not wish to have a"]
    #[doc = "|     mnemonic passphrase generated automatically."]
    #[doc = "|     All other fields are ignored."]
    #[doc = " :param call: Destination for the resulting GA_auth_handler to perform the creation."]
    #[doc = "|     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`."]
    #[doc = "|     Details of the created subaccount are returned in the ``\"result\"`` element of"]
    #[doc = "|     the GA_auth_handler. For 2of3 subaccounts the field ``\"recovery_xpub\"`` will"]
    #[doc = "|     be populated, and ``\"recovery_mnemonic\"`` will contain the recovery mnemonic"]
    #[doc = "|     passphrase if one was generated. These values must be stored safely by the"]
    #[doc = "|     caller as they will not be returned again by any call such as `GA_get_subaccounts`."]
    pub fn GA_create_subaccount(
        session: *mut GA_session,
        details: *const GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the user's subaccount details."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param details: the :ref:`get-subaccounts-params-data` controlling the request."]
    #[doc = " :param call: Destination for the resulting GA_auth_handler to perform the creation."]
    #[doc = "|     The call handlers result is :ref:`subaccount-list`."]
    #[doc = "|     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`."]
    pub fn GA_get_subaccounts(
        session: *mut GA_session,
        details: *const GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get subaccount details."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param subaccount: The value of ``\"pointer\"`` from :ref:`subaccount-list` for the subaccount."]
    #[doc = " :param call: Destination for the resulting GA_auth_handler to perform the creation."]
    #[doc = "|     The call handlers result is :ref:`subaccount-detail`."]
    #[doc = "|     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`."]
    pub fn GA_get_subaccount(
        session: *mut GA_session,
        subaccount: u32,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Rename a subaccount."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param subaccount: The value of ``\"pointer\"`` from :ref:`subaccount-list` or"]
    #[doc = "|                   :ref:`subaccount-detail` for the subaccount to rename."]
    #[doc = " :param new_name: New name for the subaccount."]
    #[doc = ""]
    #[doc = " .. note:: This call is deprecated and will be removed in a future release. Use"]
    #[doc = "|          `GA_update_subaccount` to rename subaccounts."]
    pub fn GA_rename_subaccount(
        session: *mut GA_session,
        subaccount: u32,
        new_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Update subaccount information."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param details: :ref:`subaccount-update` giving the details to update."]
    #[doc = " :param call: Destination for the resulting GA_auth_handler to complete the action."]
    #[doc = "|     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`."]
    pub fn GA_update_subaccount(
        session: *mut GA_session,
        details: *const GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get a page of the user's transaction history."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param details: :ref:`transactions-details` giving the details to get the transactions for."]
    #[doc = " :param call: Destination for the resulting GA_auth_handler to complete the action."]
    #[doc = "|     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`."]
    #[doc = ""]
    #[doc = " .. note:: Transactions are returned from newest to oldest with up to 30 transactions per page."]
    pub fn GA_get_transactions(
        session: *mut GA_session,
        details: *const GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get a new address to receive coins to."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param details: :ref:`receive-address-details`."]
    #[doc = " :param call: Destination for the resulting GA_auth_handler to complete the action."]
    #[doc = "|     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`."]
    pub fn GA_get_receive_address(
        session: *mut GA_session,
        details: *const GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get a page of addresses previously generated for a subaccount."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param details: :ref:`previous-addresses-request` detailing the previous addresses to fetch."]
    #[doc = " :param call: Destination for the resulting GA_auth_handler to complete the action."]
    #[doc = "|     The call handlers result is :ref:`previous-addresses`."]
    #[doc = "|     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`."]
    #[doc = ""]
    #[doc = " .. note:: Iteration of all addresses is complete when the results 'last_pointer'"]
    #[doc = "|     value equals 1."]
    pub fn GA_get_previous_addresses(
        session: *mut GA_session,
        details: *const GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the user's unspent transaction outputs."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param details: :ref:`unspent-outputs-request` detailing the unspent transaction outputs to fetch."]
    #[doc = " :param call: Destination for the resulting GA_auth_handler to complete the action."]
    #[doc = "|     The call handlers result is :ref:`unspent-outputs`."]
    #[doc = "|     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`."]
    pub fn GA_get_unspent_outputs(
        session: *mut GA_session,
        details: *const GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the unspent transaction outputs associated with a non-wallet private key."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param key: The private key in WIF or BIP 38 format."]
    #[doc = " :param password: The password the key is encrypted with, if any."]
    #[doc = " :param unused: unused, must be 0"]
    #[doc = " :param utxos: Destination for the returned utxos (same format as :ref:`tx-list`)."]
    #[doc = "|     Returned GA_json should be freed using `GA_destroy_json`."]
    #[doc = ""]
    #[doc = " .. note:: Neither the private key or its derived public key are transmitted."]
    pub fn GA_get_unspent_outputs_for_private_key(
        session: *mut GA_session,
        private_key: *const ::std::os::raw::c_char,
        password: *const ::std::os::raw::c_char,
        unused: u32,
        utxos: *mut *mut GA_json,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Change the status of a user's unspent transaction outputs."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param details: :ref:`unspent-outputs-status` detailing the unspent transaction outputs status to set."]
    #[doc = " :param call: Destination for the resulting GA_auth_handler to complete the action."]
    #[doc = "|     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`."]
    pub fn GA_set_unspent_outputs_status(
        session: *mut GA_session,
        details: *const GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get a transaction's details."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param txhash_hex: The transaction hash of the transaction to fetch."]
    #[doc = " :param transaction: Destination for the :ref:`external-tx-detail`."]
    #[doc = "|     Returned GA_json should be freed using `GA_destroy_json`."]
    pub fn GA_get_transaction_details(
        session: *mut GA_session,
        txhash_hex: *const ::std::os::raw::c_char,
        transaction: *mut *mut GA_json,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the sum of unspent outputs paying to a subaccount."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param details: :ref:`unspent-outputs-request` detailing the unspent transaction outputs to"]
    #[doc = "|    compute the balance from."]
    #[doc = " :param call: Destination for the resulting GA_auth_handler to complete the action."]
    #[doc = "|     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`."]
    pub fn GA_get_balance(
        session: *mut GA_session,
        details: *const GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the list of allowed currencies for all available pricing sources."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param currencies: The returned list of :ref:`currencies`."]
    #[doc = "|     Returned GA_json should be freed using `GA_destroy_json`."]
    pub fn GA_get_available_currencies(
        session: *mut GA_session,
        currencies: *mut *mut GA_json,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Convert Fiat to BTC and vice-versa."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param value_details: :ref:`convert-amount` giving the value to convert."]
    #[doc = " :param output: Destination for the converted values :ref:`amount-data`."]
    #[doc = "|     Returned GA_json should be freed using `GA_destroy_json`."]
    pub fn GA_convert_amount(
        session: *mut GA_session,
        value_details: *const GA_json,
        output: *mut *mut GA_json,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set a PIN for the user wallet."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param mnemonic: The user's mnemonic passphrase."]
    #[doc = " :param pin: The user PIN."]
    #[doc = " :param device_id: The user device identifier."]
    #[doc = " :param pin_data: The returned :ref:`pin-data` containing the user's encrypted mnemonic passphrase."]
    #[doc = "|     Returned GA_json should be freed using `GA_destroy_json`."]
    pub fn GA_set_pin(
        session: *mut GA_session,
        mnemonic: *const ::std::os::raw::c_char,
        pin: *const ::std::os::raw::c_char,
        device_id: *const ::std::os::raw::c_char,
        pin_data: *mut *mut GA_json,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Disable all PIN logins previously set."]
    #[doc = ""]
    #[doc = " After calling this method, the user will not be able to login with PIN"]
    #[doc = "| from any device that was previously enabled using `GA_set_pin`."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    pub fn GA_disable_all_pin_logins(session: *mut GA_session) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Construct a transaction."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param transaction_details: The :ref:`create-tx-details` for constructing."]
    #[doc = " :param call: Destination for the resulting GA_auth_handler to complete the action."]
    #[doc = "|     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`."]
    pub fn GA_create_transaction(
        session: *mut GA_session,
        transaction_details: *const GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Sign the user's inputs to a transaction."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param transaction_details: The :ref:`sign-tx-details` for signing, previously returned from GA_create_transaction."]
    #[doc = " :param call: Destination for the resulting GA_auth_handler to perform the signing."]
    #[doc = "|     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`."]
    pub fn GA_sign_transaction(
        session: *mut GA_session,
        transaction_details: *const GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Sign one or more of a user's inputs in a PSBT or PSET."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param details: The :ref:`sign-psbt-details` for signing."]
    #[doc = " :param call: Destination for the resulting GA_auth_handler to perform the signing."]
    #[doc = "|     The call handlers result is :ref:`sign-psbt-result`."]
    #[doc = "|     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`."]
    #[doc = ""]
    #[doc = " .. note:: EXPERIMENTAL warning: this call may be changed in future releases."]
    pub fn GA_psbt_sign(
        session: *mut GA_session,
        details: *const GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get wallet details of a PSBT or PSET."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param details: The :ref:`psbt-wallet-details` for getting the wallet details."]
    #[doc = " :param call: Destination for the resulting GA_auth_handler to get the wallet details."]
    #[doc = "|     The call handlers result is :ref:`psbt-get-details-result`."]
    #[doc = "|     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`."]
    #[doc = ""]
    #[doc = " .. note:: EXPERIMENTAL warning: this call may be changed in future releases."]
    pub fn GA_psbt_get_details(
        session: *mut GA_session,
        details: *const GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Broadcast a fully signed transaction to the P2P network."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param transaction_hex: The signed transaction in hex to broadcast."]
    #[doc = " :param tx_hash: Destination for the resulting transactions hash."]
    #[doc = "|     Returned string should be freed using `GA_destroy_string`."]
    pub fn GA_broadcast_transaction(
        session: *mut GA_session,
        transaction_hex: *const ::std::os::raw::c_char,
        tx_hash: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Send a transaction created by GA_create_transaction and signed by GA_sign_transaction."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param transaction_details: The :ref:`send-tx-details` for sending."]
    #[doc = " :param call: Destination for the resulting GA_auth_handler to perform the send."]
    #[doc = "|     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`."]
    pub fn GA_send_transaction(
        session: *mut GA_session,
        transaction_details: *const GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Request an email containing the user's nLockTime transactions."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    pub fn GA_send_nlocktimes(session: *mut GA_session) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the number of blocks after which CSV transactions become spendable without two factor authentication."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param locktime_details: The :ref:`set-locktime-details` for setting the block value."]
    #[doc = " :param call: Destination for the resulting GA_auth_handler to change the locktime."]
    #[doc = "|     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`."]
    pub fn GA_set_csvtime(
        session: *mut GA_session,
        locktime_details: *const GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the number of blocks after which nLockTime transactions become"]
    #[doc = "|    spendable without two factor authentication. When this call"]
    #[doc = "|    succeeds, if the user has an email address associated with the"]
    #[doc = "|    wallet, an updated nlocktimes.zip file will be sent via email."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param locktime_details: The :ref:`set-locktime-details` for setting the block value."]
    #[doc = " :param call: Destination for the resulting GA_auth_handler to change the locktime."]
    #[doc = "|     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`."]
    pub fn GA_set_nlocktime(
        session: *mut GA_session,
        locktime_details: *const GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Add a transaction memo to a user's GreenAddress transaction."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param txhash_hex: The transaction hash to associate the memo with."]
    #[doc = " :param memo: The memo to set."]
    #[doc = " :param memo_type: Unused, pass 0."]
    pub fn GA_set_transaction_memo(
        session: *mut GA_session,
        txhash_hex: *const ::std::os::raw::c_char,
        memo: *const ::std::os::raw::c_char,
        memo_type: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the current network's fee estimates."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param estimates: Destination for the returned :ref:`estimates`."]
    #[doc = "|     Returned GA_json should be freed using `GA_destroy_json`."]
    #[doc = ""]
    #[doc = " The estimates are returned as an array of 25 elements. Each element is"]
    #[doc = " an integer representing the fee estimate expressed as satoshi per 1000"]
    #[doc = " bytes. The first element is the minimum relay fee as returned by the"]
    #[doc = " network, while the remaining elements are the current estimates to use"]
    #[doc = " for a transaction to confirm from 1 to 24 blocks."]
    #[doc = ""]
    pub fn GA_get_fee_estimates(
        session: *mut GA_session,
        estimates: *mut *mut GA_json,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the user's mnemonic passphrase."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param password: Optional password to encrypt the user's mnemonic passphrase with."]
    #[doc = " :param mnemonic: Destination for the user's 24 word mnemonic passphrase. if a"]
    #[doc = "|     non-empty password is given, the returned mnemonic passphrase will be"]
    #[doc = "|     27 words long and will require the password to use for logging in."]
    #[doc = "|     Returned string should be freed using `GA_destroy_string`."]
    pub fn GA_get_mnemonic_passphrase(
        session: *mut GA_session,
        password: *const ::std::os::raw::c_char,
        mnemonic: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the latest un-acknowledged system message."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param message_text: The returned UTF-8 encoded message text."]
    #[doc = "|     Returned string should be freed using `GA_destroy_string`."]
    #[doc = ""]
    #[doc = " .. note:: If all current messages are acknowledged, an empty string is returned."]
    pub fn GA_get_system_message(
        session: *mut GA_session,
        message_text: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Sign and acknowledge a system message."]
    #[doc = ""]
    #[doc = " The message text will be signed with a key derived from the wallet master key and the signature"]
    #[doc = " sent to the server."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param message_text: UTF-8 encoded message text being acknowledged."]
    #[doc = " :param call: Destination for the resulting GA_auth_handler to acknowledge the message."]
    #[doc = "|     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`."]
    pub fn GA_ack_system_message(
        session: *mut GA_session,
        message_text: *const ::std::os::raw::c_char,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the two factor configuration for the current user."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param config: Destination for the returned :ref:`twofactor_configuration`."]
    #[doc = "|     Returned GA_json should be freed using `GA_destroy_json`."]
    pub fn GA_get_twofactor_config(
        session: *mut GA_session,
        config: *mut *mut GA_json,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Change wallet settings."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param settings: The new :ref:`settings` values."]
    #[doc = " :param call: Destination for the resulting GA_auth_handler."]
    #[doc = "|     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`."]
    pub fn GA_change_settings(
        session: *mut GA_session,
        settings: *const GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get current wallet settings."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param settings: Destination for the current :ref:`settings`."]
    #[doc = "|     Returned GA_json should be freed using `GA_destroy_json`."]
    pub fn GA_get_settings(
        session: *mut GA_session,
        settings: *mut *mut GA_json,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GA_convert_json_to_string(
        json: *const GA_json,
        output: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GA_convert_string_to_json(
        input: *const ::std::os::raw::c_char,
        output: *mut *mut GA_json,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GA_convert_json_value_to_string(
        json: *const GA_json,
        path: *const ::std::os::raw::c_char,
        output: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GA_convert_json_value_to_uint32(
        json: *const GA_json,
        path: *const ::std::os::raw::c_char,
        output: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GA_convert_json_value_to_uint64(
        json: *const GA_json,
        path: *const ::std::os::raw::c_char,
        output: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GA_convert_json_value_to_bool(
        json: *const GA_json,
        path: *const ::std::os::raw::c_char,
        output: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GA_convert_json_value_to_json(
        json: *const GA_json,
        path: *const ::std::os::raw::c_char,
        output: *mut *mut GA_json,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Free a GA_json object."]
    #[doc = ""]
    #[doc = " :param json: GA_json object to free."]
    pub fn GA_destroy_json(json: *mut GA_json) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the status/result of an action requiring authorization."]
    #[doc = ""]
    #[doc = " :param call: The auth_handler whose status is to be queried."]
    #[doc = " :param output: Destination for the resulting :ref:`auth-handler-status`."]
    #[doc = "|     Returned GA_json should be freed using `GA_destroy_json`."]
    #[doc = ""]
    #[doc = " Methods in the api that may require two factor or hardware authentication"]
    #[doc = " to complete return a GA_auth_handler object. This object encapsulates the"]
    #[doc = " process of determining whether authentication is required and handling"]
    #[doc = " conditions such as re-prompting and re-trying after an incorrect two"]
    #[doc = " factor code is entered."]
    #[doc = ""]
    #[doc = " The object acts as a state machine which is stepped through by the caller"]
    #[doc = " until the desired action is completed. At each step, the current state can"]
    #[doc = " be determined and used to perform the next action required."]
    #[doc = ""]
    #[doc = " Some actions require a sequence of codes and decisions; these are hidden"]
    #[doc = " behind the state machine interface so that callers do not need to handle"]
    #[doc = " special cases or program their own logic to handle any lower level API"]
    #[doc = " differences."]
    #[doc = ""]
    #[doc = " The state machine has the following states, which are returned in the"]
    #[doc = " ``\"status\"`` element from `GA_auth_handler_get_status`:"]
    #[doc = ""]
    #[doc = " * ``\"done\"``: The action has been completed successfully. Any data returned"]
    #[doc = "|  from the action is present in the ``\"result\"`` element of the status JSON."]
    #[doc = "| The auth_handler object should be destroyed using `GA_destroy_auth_handler`"]
    #[doc = "| after receiving this status."]
    #[doc = ""]
    #[doc = " * ``\"error\"``: A non-recoverable error occurred performing the action. The"]
    #[doc = "| associated error message is given in the status element ``\"error\"``. The"]
    #[doc = "| auth_handler object should be destroyed using `GA_destroy_auth_handler` and"]
    #[doc = "| the action restarted from scratch if this state is returned."]
    #[doc = ""]
    #[doc = " * ``\"request_code\"``: Two factor authorization is required. The caller should"]
    #[doc = "| prompt the user to choose a two factor method from the ``\"methods\"`` element"]
    #[doc = "| and call `GA_auth_handler_request_code` with the selected method."]
    #[doc = ""]
    #[doc = " * ``\"resolve_code\"``: A twofactor code from the ``\"request_code\"`` step, or"]
    #[doc = "| data from a hardware device is required. If the status JSON contains"]
    #[doc = "| :ref:`hw-required-data`, then see :ref:`hw-resolve-overview` for details."]
    #[doc = "| Otherwise, to resolve a twofactor code, the caller should prompt the user"]
    #[doc = "| to enter the code from the twofactor method chosen in the ``\"request_code\"``"]
    #[doc = "| step, and pass this code to `GA_auth_handler_resolve_code`."]
    #[doc = ""]
    #[doc = " * ``\"call\"``: Twofactor or hardware authorization is complete and the caller"]
    #[doc = "| should call `GA_auth_handler_call` to perform the action."]
    #[doc = ""]
    pub fn GA_auth_handler_get_status(
        call: *mut GA_auth_handler,
        output: *mut *mut GA_json,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Request a two factor authentication code to authorize an action."]
    #[doc = ""]
    #[doc = " :param call: The auth_handler representing the action to perform."]
    #[doc = " :param method: The selected two factor method to use"]
    pub fn GA_auth_handler_request_code(
        call: *mut GA_auth_handler,
        method: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Authorize an action by providing its previously requested two factor authentication code."]
    #[doc = ""]
    #[doc = " :param call: The auth_handler representing the action to perform."]
    #[doc = " :param code: The two factor authentication code received by the user, or"]
    #[doc = "|    the serialised JSON response for hardware interaction (see :ref:`hw-resolve-overview`)."]
    pub fn GA_auth_handler_resolve_code(
        call: *mut GA_auth_handler,
        code: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Perform an action following the completion of authorization."]
    #[doc = ""]
    #[doc = " :param call: The auth_handler representing the action to perform."]
    pub fn GA_auth_handler_call(call: *mut GA_auth_handler) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Free an auth_handler after use."]
    #[doc = ""]
    #[doc = " :param call: The auth_handler to free."]
    pub fn GA_destroy_auth_handler(call: *mut GA_auth_handler) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Enable or disable a two factor authentication method."]
    #[doc = ""]
    #[doc = " :param session: The session to use"]
    #[doc = " :param method: The two factor method to enable/disable, i.e. ``\"email\"``, ``\"sms\"``, ``\"phone\"``, ``\"gauth\"``"]
    #[doc = " :param twofactor_details: The two factor method and associated data such as an email address. :ref:`twofactor-detail`"]
    #[doc = " :param call: Destination for the resulting GA_auth_handler to perform the action"]
    #[doc = "|     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`."]
    pub fn GA_change_settings_twofactor(
        session: *mut GA_session,
        method: *const ::std::os::raw::c_char,
        twofactor_details: *const GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Request to begin the two factor authentication reset process."]
    #[doc = ""]
    #[doc = " Returns the ``\"twofactor_reset\"`` portion of :ref:`twofactor_configuration` in"]
    #[doc = " the GA_auth_handler result."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param email: The new email address to enable once the reset waiting period expires."]
    #[doc = " :param is_dispute: GA_TRUE if the reset request is disputed, GA_FALSE otherwise."]
    #[doc = " :param call: Destination for the resulting GA_auth_handler to request the reset."]
    #[doc = "|     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`."]
    pub fn GA_twofactor_reset(
        session: *mut GA_session,
        email: *const ::std::os::raw::c_char,
        is_dispute: u32,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Undo a request to begin the two factor authentication reset process."]
    #[doc = ""]
    #[doc = " Returns the ``\"twofactor_reset\"`` portion of :ref:`twofactor_configuration` in"]
    #[doc = " the GA_auth_handler result."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param email: The email address to cancel the reset request for. Must be"]
    #[doc = "|     the email previously passed to `GA_twofactor_reset`."]
    #[doc = " :param call: Destination for the resulting GA_auth_handler to request the reset."]
    #[doc = "|     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`."]
    #[doc = ""]
    #[doc = " .. note:: Unlike `GA_twofactor_cancel_reset`, this call only removes the reset"]
    #[doc = "|     request associated with the given email. If other emails have requested"]
    #[doc = "|     a reset, the wallet will still remain locked following this call."]
    pub fn GA_twofactor_undo_reset(
        session: *mut GA_session,
        email: *const ::std::os::raw::c_char,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Cancel all two factor reset requests and unlock the wallet for normal operation."]
    #[doc = ""]
    #[doc = " This call requires authentication using an existing wallet twofactor method."]
    #[doc = ""]
    #[doc = " Returns the ``\"twofactor_reset\"`` portion of :ref:`twofactor_configuration` in"]
    #[doc = " the GA_auth_handler result."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param call: Destination for the resulting GA_auth_handler to cancel the reset."]
    #[doc = "|     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`."]
    pub fn GA_twofactor_cancel_reset(
        session: *mut GA_session,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Change twofactor limits settings."]
    #[doc = ""]
    #[doc = " :param session: The session to use."]
    #[doc = " :param limit_details: Details of the new :ref:`transaction-limits`"]
    #[doc = " :param call: Destination for the resulting GA_auth_handler to perform the change."]
    #[doc = "|     Returned GA_auth_handler should be freed using `GA_destroy_auth_handler`."]
    pub fn GA_twofactor_change_limits(
        session: *mut GA_session,
        limit_details: *const GA_json,
        call: *mut *mut GA_auth_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Free a string returned by the api."]
    #[doc = ""]
    #[doc = " :param str: The string to free."]
    pub fn GA_destroy_string(str_: *mut ::std::os::raw::c_char);
}
extern "C" {
    #[doc = " Get up to 32 random bytes."]
    #[doc = ""]
    #[doc = " Generate up to 32 random bytes using the same strategy as Bitcoin Core code."]
    #[doc = ""]
    #[doc = " :param output_bytes: bytes output buffer"]
    #[doc = " :param siz: Number of bytes to return (max. 32)"]
    pub fn GA_get_random_bytes(
        num_bytes: size_t,
        output_bytes: *mut ::std::os::raw::c_uchar,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Generate a new random BIP 39 mnemonic."]
    #[doc = ""]
    #[doc = " :param output: The generated mnemonic phrase."]
    #[doc = "|     Returned string should be freed using `GA_destroy_string`."]
    pub fn GA_generate_mnemonic(output: *mut *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Generate a new random 12 word BIP 39 mnemonic."]
    #[doc = ""]
    #[doc = " :param output: The generated mnemonic phrase."]
    #[doc = "|     Returned string should be freed using `GA_destroy_string`."]
    pub fn GA_generate_mnemonic_12(
        output: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Validate a BIP 39 mnemonic."]
    #[doc = ""]
    #[doc = " :param mnemonic: The mnemonic phrase"]
    #[doc = " :param valid: Destination for the result: GA_TRUE if the mnemonic is valid else GA_FALSE"]
    pub fn GA_validate_mnemonic(
        mnemonic: *const ::std::os::raw::c_char,
        valid: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Register a network configuration"]
    #[doc = ""]
    #[doc = " :param name: The name of the network to register"]
    #[doc = " :param network_details: The :ref:`network` configuration to register"]
    #[doc = ""]
    #[doc = " Any existing configuration with the same name is overwritten."]
    #[doc = " If the provided JSON is empty, any existing configuration for"]
    #[doc = " the network is removed."]
    #[doc = ""]
    pub fn GA_register_network(
        name: *const ::std::os::raw::c_char,
        network_details: *const GA_json,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the available network configurations"]
    #[doc = ""]
    #[doc = " :param output: Destination for the :ref:`networks-list`"]
    #[doc = "|     Returned GA_json should be freed using `GA_destroy_json`."]
    pub fn GA_get_networks(output: *mut *mut GA_json) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get a uint32_t in the range 0 to (upper_bound - 1) without bias"]
    #[doc = ""]
    #[doc = " :param output: Destination for the generated uint32_t."]
    pub fn GA_get_uniform_uint32_t(upper_bound: u32, output: *mut u32) -> ::std::os::raw::c_int;
}
